{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/store.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","pages/Success.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","createStore","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","dispatch","useDispatch","useSelector","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Success","addOrder","setTimeout","saveOrder","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bde74454.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import { useReducer } from 'react';\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from './actions';\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n            ...state, // copy of the state argument\n            products: [...action.products] // new array with action.products value spread across it\n            };\n        // if action.type value is `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products],\n            };\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n            \n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                if (action._id === product._id) {\n                    product.purchaseQuantity = action.purchaseQuantity;\n                }\n                return product;\n                })\n            };\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n        // if it's none of these actions, do not update state at all and keep things the same!\n        default:\n            return state;\n    }\n};\n\n// initialize global state object, then provide functionality for updating\n// that state by running it through custom reducer function.\nexport function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\n\n// for shopping cart\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import {reducer} from './reducers';\nimport { createStore } from 'redux'; \n\nconst initialState = {\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: ''\n}\n\n// export created store\nexport default createStore(reducer, initialState)","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n      \n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { idbPromise } from \"../../utils/helpers\";\n\n// import necessary hook and actions\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nfunction ProductItem(item) {\n  // const [state, dispatch] = useStoreContext();\n\n  // const { cart } = state;\n  const dispatch = useDispatch();\n  const cart = useSelector(state => state.cart);\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n  \n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      // (...item) = item with all properties cheat \n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect } from 'react';\nimport ProductItem from '../ProductItem';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport spinner from '../../assets/spinner.gif';\n\n\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nfunction ProductList() {\n  // state = current state, dispatch = method to update state\n  // const [state, dispatch] = useStoreContext();\n  // destructure currentCategory from state\n  // const { currentCategory } = state;\n  \n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const currentCategory = state.currentCategory;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  // runs when useQuery() hook returns\n  // runs on component load && when some form of state changes in this component \n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // but let's also take each product and save it to IndexedDB using the helper function \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n  \n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n  \n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n  \n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n\n// useStoreContext hook to retrieve current state from global state object\n// import { useStoreContext } from \"../../utils/GlobalState\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n\n// import idbPromise()\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction CategoryMenu() {\n  // state = current state, dispatch = method to update state\n  // const [state, dispatch] = useStoreContext(); \n  const dispatch = useDispatch();\n  const categories = useSelector(state => state.categories);\n  // only need categories array from state, so destructure\n  // const { categories } = state;\n  // WHAT IS THIS V\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  // runs when it notices categoryData is not undefined anymore\n  // which is when the useQuery() hook returns\n  // runs on component load, and when some form of state changes in that component\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  // use click handler function in JSX below to update global state \n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n\n// remove Context:\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch } from 'react-redux';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n  // const [, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n  \n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n    \n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n    \n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport { loadStripe } from '@stripe/stripe-js'; // Stripe checkout\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n\n// remove Context:\n// import { useStoreContext } from '../../utils/GlobalState';\n// import useSelector and useDispatch from react-redux instead\nimport { useSelector, useDispatch } from 'react-redux';\n\n\n\n// used to perform checkout redirect (same test key as HTML test)\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n    // const [state, dispatch] = useStoreContext();\n    // ^ replaced with redux below\n    const state = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    // useLazyQuery hook from apollo\n    // data will contain the checkout session only after query \n    // is called with getCheckout()\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n        };\n        // if state.cart.length === 0 then execute getCart() to retrieve and save cart items to global state obj\n        if (!state.cart.length) {\n            getCart();\n        }\n    }, [state.cart.length, dispatch]);\n\n    // for when data receives info, to redirect Stripe using stripePromise\n    useEffect(() => {\n        if (data) {\n            stripePromise.then((res) => {\n                res.redirectToCheckout({ sessionId: data.checkout.session });\n            });\n        }\n    }, [data]);\n    \n    function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        state.cart.forEach(item => {\n          sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    // when user clicks checkout, this func will loop over items saved\n    // in state.cart and add their IDs to a new productIds array.\n    // productIds is sent to QUERY_CHECKOUT\n    function submitCheckout() {\n        const productIds = [];\n    \n        state.cart.forEach((item) => {\n            for (let i = 0; i < item.purchaseQuantity; i++) {\n                productIds.push(item._id);\n            }\n        });\n\n        getCheckout({\n            variables: { products: productIds }\n        });\n    }\n\n    // runs before return\n    if (!state.cartOpen) {\n        return (\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span\n                    role=\"img\"\n                    aria-label=\"trash\">🛒</span>\n            </div>\n        );\n    }\n\n    console.log(state)\n\n    return (\n        // <div className=\"cart\">\n        // <div className=\"close\" onClick={toggleCart}>[close]</div>\n        // <h2>Shopping Cart</h2>\n        // <div>\n        //     <CartItem item={{name:'Camera', image:'camera.jpg', price:5, purchaseQuantity:3}} />\n        //     <CartItem item={{name:'Soap', image:'soap.jpg', price:6, purchaseQuantity:4}} />\n\n        //     <div className=\"flex-row space-between\">\n        //         <strong>Total: $0</strong>\n        //         {\n        //         Auth.loggedIn() ?\n        //             <button>\n        //             Checkout\n        //             </button>\n        //             :\n        //             <span>(log in to check out)</span>\n        //         }\n        //     </div>\n        //     </div>\n        // </div>\n        <div className=\"cart\">\n        <div className=\"close\" onClick={toggleCart}>[close]</div>\n        <h2>Shopping Cart</h2>\n        {state.cart.length ? (\n            <div>\n            {state.cart.map(item => (\n                <CartItem key={item._id} item={item} />\n            ))}\n            <div className=\"flex-row space-between\">\n                <strong>Total: ${calculateTotal()}</strong>\n                {\n                Auth.loggedIn() ?\n                    <button onClick={submitCheckout}>\n                    Checkout\n                    </button>\n                    :\n                    <span>(log in to check out)</span>\n                }\n            </div>\n            </div>\n        ) : (\n            <h3>\n            <span role=\"img\" aria-label=\"shocked\">\n                😱\n            </span>\n            You haven't added anything to your cart yet!\n            </h3>\n        )}\n        </div>\n    );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport Cart from '../components/Cart';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport { idbPromise } from \"../utils/helpers\";\n\n// import { useStoreContext } from \"../utils/GlobalState\";\nimport { useSelector, useDispatch } from 'react-redux';\n\n\n// this is the Product Page! \nfunction Detail() {\n  // const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const { id } = useParams();\n  \n  const [currentProduct, setCurrentProduct] = useState({})\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  const { products, cart } = state;\n  \n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron/index.js'\nimport { ADD_ORDER } from '../utils/mutations'\n// import idbPromise()\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    // on Success load, read everything saved in indexedDB cart store\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n    async function saveOrder() {\n        const cart = await idbPromise('cart', 'get');\n        const products = cart.map(item => item._id);\n\n        if (products.length) {\n            const { data } = await addOrder({ variables: { products } });\n            const productData = data.addOrder.products;\n        \n            productData.forEach((item) => {\n                idbPromise('cart', 'delete', item);\n            });\n        }\n\n        // relocate to homepage after 3 seconds\n        setTimeout(() => {\n            window.location.assign('/');\n        }, 3000);\n    }\n\n    saveOrder();\n    }, [addOrder]);\n\n    return (\n        <div>\n            <Jumbotron>\n            <h1>Success!</h1>\n            <h2>\n                Thank you for your purchase!\n            </h2>\n            <h2>\n                You will now be redirected to the homepage\n            </h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\n// import Redux store\nimport store from './utils/store'\n// import Provider from React-Redux\nimport { Provider } from 'react-redux';\n\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Success from './pages/Success';\nimport Nav from './components/Nav';\n// remove Context:\n// import { StoreProvider } from \"./utils/GlobalState\";\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}